{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["style","height","App","sceneSetup","width","el","clientWidth","clientHeight","scene","THREE","camera","controls","OrbitControls","position","z","renderer","setSize","appendChild","domElement","createCube","x","color","geometry","texture","load","material","emissive","side","flatShading","map","cube","addCustomSceneObjects","cubes","forEach","cubeProp","push","add","lights","set","startAnimationLoop","rotation","y","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","dispose","ref","Component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAKMA,G,MAAQ,CACZC,OAAQ,MA+HKC,E,2MA5GbC,WAAa,WAEX,IAAMC,EAAQ,EAAKC,GAAGC,YAChBL,EAAS,EAAKI,GAAGE,aAEvB,EAAKC,MAAQ,IAAIC,IACjB,EAAKC,OAAS,IAAID,IACd,GACAL,EAAQH,EACR,GACA,KAEJ,EAAKU,SAAW,IAAIC,IAAe,EAAKF,OAAQ,EAAKL,IAGrD,EAAKK,OAAOG,SAASC,EAAI,EAEzB,EAAKC,SAAW,IAAIN,IACpB,EAAKM,SAASC,QAASZ,EAAOH,GAC9B,EAAKI,GAAGY,YAAa,EAAKF,SAASG,a,EAGrCC,WAAa,SAACC,EAAGC,GAEf,IAAMC,EAAW,IAAIb,IAAkB,EAAG,EAAG,GACvCc,GAAU,IAAId,KAAsBe,KAAK,gCACzCC,EAAW,IAAIhB,IAAyB,CAC1CY,MAAOA,EACPK,SAAU,OACVC,KAAMlB,IACNmB,aAAa,EACbC,IAAKN,IAELO,EAAO,IAAIrB,IAAYa,EAAUG,GAGrC,OAFAK,EAAKjB,SAASO,EAAIA,EAEXU,G,EAGTC,sBAAyB,WAgBvB,EAAKC,MAAQ,GALK,CAChB,CAAEZ,GAAI,EAAGC,MAAO,SAChB,CAAED,EAAG,EAAGC,MAAO,SACf,CAAED,EAAG,EAAGC,MAAO,UAGPY,SAAQ,SAACC,GACjB,EAAKF,MAAMG,KAAK,EAAKhB,WAAWe,EAASd,EAAGc,EAASb,WAGtD,EAAKW,MAAMC,SAAQ,SAACH,GACnB,EAAKtB,MAAM4B,IAAKN,MAGlB,IAAMO,EAAS,GACfA,EAAQ,GAAM,IAAI5B,IAAkB,SAAU,EAAG,GACjD4B,EAAQ,GAAM,IAAI5B,IAAkB,SAAU,EAAG,GACjD4B,EAAQ,GAAM,IAAI5B,IAAkB,SAAU,EAAG,GAEjD4B,EAAQ,GAAIxB,SAASyB,IAAK,EAAG,IAAK,GAClCD,EAAQ,GAAIxB,SAASyB,IAAK,IAAK,IAAK,KACpCD,EAAQ,GAAIxB,SAASyB,KAAO,KAAO,KAAO,KAE1C,EAAK9B,MAAM4B,IAAKC,EAAQ,IACxB,EAAK7B,MAAM4B,IAAKC,EAAQ,IACxB,EAAK7B,MAAM4B,IAAKC,EAAQ,K,EAG1BE,mBAAqB,WACnB,EAAKP,MAAMC,SAAQ,SAACH,GAClBA,EAAKU,SAASpB,GAAK,IACnBU,EAAKU,SAASC,GAAK,OAGrB,EAAK1B,SAAS2B,OAAQ,EAAKlC,MAAO,EAAKE,QACvC,EAAKiC,UAAYC,OAAOC,sBAAsB,EAAKN,qB,EAGrDO,mBAAqB,WACnB,IAAM1C,EAAQ,EAAKC,GAAGC,YAChBL,EAAS,EAAKI,GAAGE,aAEvB,EAAKQ,SAASC,QAASZ,EAAOH,GAC9B,EAAKS,OAAOqC,OAAS3C,EAAQH,EAC7B,EAAKS,OAAOsC,0B,mFA3GVC,KAAK9C,aACL8C,KAAKlB,wBACLkB,KAAKV,qBAELK,OAAOM,iBAAiB,SAAUD,KAAKH,sB,6CAIzCF,OAAOO,oBAAoB,SAAUF,KAAKH,oBAC1CF,OAAOQ,qBAAqBH,KAAKN,WACjCM,KAAKtC,SAAS0C,Y,+BAoGN,IAAD,OACL,OACA,oCACA,sDACA,yBAAKrD,MAAOA,EAAOsD,IAAK,SAAAA,GAAG,OAAK,EAAKjD,GAAKiD,KAC1C,oE,GAtHYC,aCGEC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OAAO,kBAAC,EAAD,MAASmB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8106ad70.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport './App.css';\n\nconst style = {\n  height: 600 // we can control scene size by setting container dimensions\n};\n\nclass App extends Component {\n\n  componentDidMount() {\n      this.sceneSetup();\n      this.addCustomSceneObjects();\n      this.startAnimationLoop();\n\n      window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n  \n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n        75, // fov = field of view\n        width / height, // aspect ratio\n        0.1, // near plane\n        1000 // far plane\n    );\n    this.controls = new OrbitControls( this.camera, this.el );\n\n    // set some distance from a cube that is located at z = 0\n    this.camera.position.z = 5;\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize( width, height );\n    this.el.appendChild( this.renderer.domElement ); // mount using React ref\n  };\n\n  createCube = (x, color) => {\n    //this.cubes = [];\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const texture = new THREE.TextureLoader().load('textures/galvanized_blue.jpg');\n    const material = new THREE.MeshPhongMaterial( {\n        color: color,\n        emissive: 0x072534,\n        side: THREE.DoubleSide,\n        flatShading: true,\n        map: texture\n    } );\n    let cube = new THREE.Mesh( geometry, material );\n    cube.position.x = x;\n    \n    return cube;\n  };\n\n  addCustomSceneObjects  = () => {\n    /*\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\n    const material = new THREE.MeshPhongMaterial( {\n        color: 0xff00ff,\n        emissive: 0x072534,\n        side: THREE.DoubleSide,\n        flatShading: true\n    } );\n    this.cube = new THREE.Mesh( geometry, material );\n    */\n    const cubeProps = [\n      { x: -2, color: 0x156289 },\n      { x: 0, color: 0x158962 },\n      { x: 2, color: 0x621589 }\n    ];\n    this.cubes = [];\n    cubeProps.forEach((cubeProp) => {\n      this.cubes.push(this.createCube(cubeProp.x, cubeProp.color));\n     });\n\n     this.cubes.forEach((cube) => {\n      this.scene.add( cube );\n     });\n  \n    const lights = [];\n    lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n    lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n    lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n\n    lights[ 0 ].position.set( 0, 200, 0 );\n    lights[ 1 ].position.set( 100, 200, 100 );\n    lights[ 2 ].position.set( - 100, - 200, - 100 );\n\n    this.scene.add( lights[ 0 ] );\n    this.scene.add( lights[ 1 ] );\n    this.scene.add( lights[ 2 ] );\n  };\n\n  startAnimationLoop = () => {\n    this.cubes.forEach((cube) => {\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n    });\n\n    this.renderer.render( this.scene, this.camera );\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize( width, height );\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n  };\n  \n  render() {\n      return (\n      <>\n      <div>Demo of Rotating Cube</div>\n      <div style={style} ref={ref => (this.el = ref)} />\n      <div>Scroll to zoom, drag to rotate</div>\n      </>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}